AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Unified SAM template defining downloader/updater Lambdas and MWAA + networking + SQS

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: MWAAEnvironment

  VpcCIDR:
    Description: The IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: The IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: The IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  DagProcessingLogs:
    Description: Log level for DagProcessing
    Type: String
    Default: INFO

  SchedulerLogsLevel:
    Description: Log level for SchedulerLogs
    Type: String
    Default: INFO

  TaskLogsLevel:
    Description: Log level for TaskLogs
    Type: String
    Default: INFO

  WorkerLogsLevel:
    Description: Log level for WorkerLogs
    Type: String
    Default: INFO

  WebserverLogsLevel:
    Description: Log level for WebserverLogs
    Type: String
    Default: INFO

  StartupScriptS3Path:
    Description: Full S3 URI to the startup script file (e.g., s3://bucket-name/startup.sh)
    Type: String
    Default: ""

  StartupScriptS3ObjectVersion:
    Description: Version ID of the startup script in S3 (leave empty for initial deployment)
    Type: String
    Default: ""

  RequirementsS3Path:
    Description: The relative path to the requirements.txt file on your Amazon S3 bucket. For example, requirements.txt.
    Type: String
    Default: ""

  RequirementsS3ObjectVersion:
    Description: The version of the requirements.txt file on your Amazon S3 bucket.
    Type: String
    Default: ""

  SourceS3BucketArn:
    Description: ARN of the S3 bucket that will send S3 event notifications to the SQS queue (e.g., arn:aws:s3:::bucket-name)
    Type: String

Conditions:
  HasStartupScript: !Not [!Equals [!Ref StartupScriptS3ObjectVersion, ""]]
  HasRequirements: !Not [!Equals [!Ref RequirementsS3ObjectVersion, ""]]

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 300
    Tracing: Active
    PackageType: Zip

Resources:
  #####################################################################################################################
  # VPC + Subnets + Routing + SG
  #####################################################################################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MWAAEnvironment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MWAAEnvironment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "mwaa-security-group"
      GroupDescription: "Security group with a self-referencing inbound rule."
      VpcId: !Ref VPC

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroup

  EnvironmentBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  #####################################################################################################################
  # SQS (DLQ + primary) + QueuePolicy for S3 events
  #####################################################################################################################

  MwaaDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 300
      SqsManagedSseEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  MwaaSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
      MessageRetentionPeriod: 345600
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MwaaDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  MwaaSqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref MwaaSqsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowS3ToSendMessage
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt MwaaSqsQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Ref SourceS3BucketArn

  #####################################################################################################################
  # MWAA Environment + IAM
  #####################################################################################################################

  MwaaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - airflow-env.amazonaws.com
                - airflow.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/service-role/"

  MwaaExecutionPolicy:
    DependsOn: EnvironmentBucket
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MwaaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: airflow:PublishMetrics
            Resource:
              - !Sub "arn:aws:airflow:${AWS::Region}:${AWS::AccountId}:environment/${EnvironmentName}"
          - Effect: Deny
            Action: s3:ListAllMyBuckets
            Resource:
              - !Sub "${EnvironmentBucket.Arn}"
              - !Sub "${EnvironmentBucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:*"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
            Resource: "*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:GetLogEvents
              - logs:GetLogRecord
              - logs:GetLogGroupFields
              - logs:GetQueryResults
              - logs:DescribeLogGroups
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:airflow-${AWS::StackName}*"
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:*:airflow-celery-*"
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
            Resource:
              - !GetAtt MwaaSqsQueue.Arn
              - !GetAtt MwaaDeadLetterQueue.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - "kms:GenerateDataKey*"
              - kms:Encrypt
            NotResource: !Sub "arn:aws:kms:*:${AWS::AccountId}:key/*"
            Condition:
              StringLike:
                "kms:ViaService":
                  - !Sub "sqs.${AWS::Region}.amazonaws.com"
          # Allow Airflow to invoke the downloader Lambda
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt DownloaderFunction.Arn
          # Allow Airflow to read the SSM parameter with the Lambda ARN
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/downloader-function-arn"

  MwaaEnvironment:
    Type: AWS::MWAA::Environment
    DependsOn: MwaaExecutionPolicy
    Properties:
      Name: !Sub "${AWS::StackName}-MwaaEnvironment"
      SourceBucketArn: !GetAtt EnvironmentBucket.Arn
      ExecutionRoleArn: !GetAtt MwaaExecutionRole.Arn
      AirflowConfigurationOptions:
        core.parallelism: "0"
        celery.worker_autoscale: "25,1"
        core.dag_concurrency: "1000"
      DagS3Path: dags/
      StartupScriptS3Path: !If [HasStartupScript, !Ref StartupScriptS3Path, !Ref "AWS::NoValue"]
      StartupScriptS3ObjectVersion: !If [HasStartupScript, !Ref StartupScriptS3ObjectVersion, !Ref "AWS::NoValue"]
      RequirementsS3Path: !If [HasRequirements, !Ref RequirementsS3Path, !Ref "AWS::NoValue"]
      RequirementsS3ObjectVersion: !If [HasRequirements, !Ref RequirementsS3ObjectVersion, !Ref "AWS::NoValue"]
      EnvironmentClass: mw1.large
      NetworkConfiguration:
        SecurityGroupIds:
          - !GetAtt SecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      MaxWorkers: 25
      MinWorkers: 3
      MinWebservers: 2
      MaxWebservers: 5
      WebserverAccessMode: PUBLIC_ONLY
      LoggingConfiguration:
        DagProcessingLogs:
          LogLevel: !Ref DagProcessingLogs
          Enabled: true
        SchedulerLogs:
          LogLevel: !Ref SchedulerLogsLevel
          Enabled: true
        TaskLogs:
          LogLevel: !Ref TaskLogsLevel
          Enabled: true
        WorkerLogs:
          LogLevel: !Ref WorkerLogsLevel
          Enabled: true
        WebserverLogs:
          LogLevel: !Ref WebserverLogsLevel
          Enabled: true

  #####################################################################################################################
  # Serverless Functions
  #####################################################################################################################
  DownloaderFunction:
    Type: AWS::Serverless::Function
    Properties:
      EphemeralStorage:
        Size: 1024
      MemorySize: 2048
      CodeUri: .
      Handler: index.handler
      Description: "Downloads data (granted full S3 access as requested)"
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  UpdaterFunction:
    Type: AWS::Serverless::Function
    MemorySize: 128
    Properties:
      CodeUri: .
      Handler: lambda-update.handler
      Description: "Updates env var on DownloaderFunction and runs every minute."
      Environment:
        Variables:
          TARGET_FUNCTION_NAME: !Ref DownloaderFunction
          VAR_NAME: DEPLOY_TS
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                Resource: !GetAtt DownloaderFunction.Arn
      Events:
        UpdateSchedule:
          Type: Schedule
          Properties:
            Name: UpdateDownloaderEveryMinute
            Description: "Invoke updater every minute to refresh env var."
            Schedule: "cron(* * * * ? *)"
            Enabled: true

  # Persist the DownloaderFunction ARN to SSM for Airflow to consume
  DownloaderFunctionArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/downloader-function-arn"
      Type: String
      Value: !GetAtt DownloaderFunction.Arn
      Description: ARN of the downloader Lambda function for MWAA

  #####################################################################################################################
  # Step Function for S3 to SQS processing
  #####################################################################################################################

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      Policies:
        - PolicyName: StepFunctionS3SqsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !GetAtt EnvironmentBucket.Arn
                  - !Sub "${EnvironmentBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                Resource: !GetAtt MwaaSqsQueue.Arn

  S3ToSqsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-S3ToSqsProcessor"
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionS3Location:
        Bucket: !Ref EnvironmentBucket
        Key: step-functions/step-function.yaml

Outputs:
  DownloaderFunctionName:
    Description: Name of the downloader Lambda function
    Value: !Ref DownloaderFunction
  DownloaderFunctionArn:
    Description: ARN of the downloader Lambda function
    Value: !GetAtt DownloaderFunction.Arn
  UpdaterFunctionName:
    Description: Name of the updater Lambda function
    Value: !Ref UpdaterFunction
  UpdaterFunctionArn:
    Description: ARN of the updater Lambda function
    Value: !GetAtt UpdaterFunction.Arn
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
  EnvironmentBucketName:
    Description: S3 Bucket for MWAA Environment
    Value: !Ref EnvironmentBucket
  MwaaSqsQueueUrl:
    Description: URL of the MWAA SQS Queue
    Value: !Ref MwaaSqsQueue
  MwaaSqsQueueArn:
    Description: ARN of the MWAA SQS Queue
    Value: !GetAtt MwaaSqsQueue.Arn
  MwaaDeadLetterQueueUrl:
    Description: URL of the MWAA Dead Letter Queue
    Value: !Ref MwaaDeadLetterQueue
  MwaaDeadLetterQueueArn:
    Description: ARN of the MWAA Dead Letter Queue
    Value: !GetAtt MwaaDeadLetterQueue.Arn
  MwaaApacheAirflowUI:
    Description: MWAA Environment
    Value: !Sub "https://${MwaaEnvironment.WebserverUrl}"
  DownloaderFunctionArnParameterName:
    Description: SSM Parameter name containing DownloaderFunction ARN
    Value: !Ref DownloaderFunctionArnParameter
  S3ToSqsStateMachineArn:
    Description: ARN of the S3 to SQS processing Step Function
    Value: !Ref S3ToSqsStateMachine
  S3ToSqsStateMachineName:
    Description: Name of the S3 to SQS processing Step Function
    Value: !GetAtt S3ToSqsStateMachine.Name
